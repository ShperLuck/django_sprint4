# Generated by Django 3.2.16 on 2025-02-8 19:57


# Подключаем нужные штуки из Django, чтобы всё работало
from django.conf import settings  # Это для настроек проекта, например, чтобы взять модель пользователя
from django.db import migrations, models  # migrations — для миграций, models — для создания таблиц
import django.db.models.deletion  # Это нужно для настроек удаления связанных данных

# Создаём класс миграции — это как инструкция для базы данных
class Migration(migrations.Migration):
    # Говорим, что это самая первая миграция для нашего приложения
    initial = True

    # Зависимости — от чего зависит эта миграция
    dependencies = [
        # Подключаемся к модели пользователя из настроек (например, встроенной User)
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    # Список действий, которые нужно сделать в базе данных
    operations = [
        # Создаём таблицу для категорий
        migrations.CreateModel(
            name='Category',  # Имя модели — будет таблица с таким названием
            fields=[  # Список полей — это как столбцы в таблице
                # Настраиваем поле ID — оно будет уникальным для каждой категории
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,  # Django сам его создаёт
                        primary_key=True,  # Это главный ключ, чтобы отличать записи
                        serialize=False,  # Не трогаем это при сериализации
                        verbose_name='ID',  # Название в админке
                    ),
                ),
                # Добавляем поле, чтобы включать/выключать видимость категории
                (
                    'is_published',
                    models.BooleanField(
                        default=True,  # По умолчанию категория видна
                        help_text='Снимите галочку, чтобы скрыть публикацию.',  # Подсказка в админке
                        verbose_name='Опубликовано',  # Название в админке
                    ),
                ),
                # Поле для даты создания — чтобы знать, когда добавили категорию
                (
                    'created_at',
                    models.DateTimeField(
                        auto_now_add=True,  # Автоматически ставим дату при создании
                        verbose_name='Добавлено',  # Название в админке
                    ),
                ),
                # Поле для заголовка категории
                (
                    'title',
                    models.CharField(
                        max_length=256,  # Максимум 256 символов
                        verbose_name='Заголовок',  # Как будет называться в админке
                    ),
                ),
                # Поле для описания — сюда можно писать много текста
                ('description', models.TextField(verbose_name='Описание')),
                # Добавляем поле для картинки, но оно необязательное
                (
                    'image',
                    models.ImageField(
                        blank=True,  # Можно оставить пустым
                        upload_to='post_images',  # Папка, куда сохраняются картинки
                        verbose_name='Фото',  # Название в админке
                    ),
                ),
                # Уникальный идентификатор для URL — типа короткое имя для ссылки
                (
                    'slug',
                    models.SlugField(
                        help_text='Идентификатор страницы для URL; разрешены символы латиницы, цифры, дефис и подчёркивание.',  # Подсказка
                        unique=True,  # Должно быть уникальным
                        verbose_name='Идентификатор',  # Название в админке
                    ),
                ),
            ],
            # Настраиваем, как модель будет называться в админке
            options={
                'verbose_name': 'категория',  # Название в единственном числе
                'verbose_name_plural': 'Категории',  # Во множественном числе
            },
        ),
        # Создаём таблицу для местоположений
        migrations.CreateModel(
            name='Location',  # Имя модели
            fields=[
                # Заметим, что тут тоже ID как главный ключ
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                # Поле для включения/выключения видимости
                (
                    'is_published',
                    models.BooleanField(
                        default=True,
                        help_text='Снимите галочку, чтобы скрыть публикацию.',
                        verbose_name='Опубликовано',
                    ),
                ),
                # Дата создания — чтобы следить, когда добавили
                (
                    'created_at',
                    models.DateTimeField(
                        auto_now_add=True,
                        verbose_name='Добавлено',
                    ),
                ),
                # Название места — просто строка до 256 символов
                (
                    'name',
                    models.CharField(
                        max_length=256,
                        verbose_name='Название места',
                    ),
                ),
            ],
            # Настраиваем названия в админке
            options={
                'verbose_name': 'местоположение',
                'verbose_name_plural': 'Местоположения',
            },
        ),
        # Создаём таблицу для профилей пользователей
        migrations.CreateModel(
            name='Profile',
            fields=[
                # ID — как обычно, уникальный ключ
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                # Поле видимости профиля
                (
                    'is_published',
                    models.BooleanField(
                        default=True,
                        help_text='Снимите галочку, чтобы скрыть публикацию.',
                        verbose_name='Опубликовано',
                    ),
                ),
                # Дата создания профиля
                (
                    'created_at',
                    models.DateTimeField(
                        auto_now_add=True,
                        verbose_name='Добавлено',
                    ),
                ),
                # Имя пользователя — можно не заполнять
                ('first_name', models.CharField(blank=True, max_length=30)),
                # Фамилия — тоже необязательная
                ('last_name', models.CharField(blank=True, max_length=30)),
                # Почта — тоже можно оставить пустой
                ('email', models.EmailField(blank=True, max_length=254)),
                # Адрес — необязательное поле
                ('address', models.CharField(blank=True, max_length=100)),
            ],
            # Настройки модели
            options={
                'abstract': False,  # Это значит, что таблица реально создаётся
            },
        ),
        # Создаём таблицу для постов
        migrations.CreateModel(
            name='Post',
            fields=[
                # ID — уникальный ключ для каждого поста
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                # Поле видимости поста
                (
                    'is_published',
                    models.BooleanField(
                        default=True,
                        help_text='Снимите галочку, чтобы скрыть публикацию.',
                        verbose_name='Опубликовано',
                    ),
                ),
                # Дата создания поста
                (
                    'created_at',
                    models.DateTimeField(
                        auto_now_add=True,
                        verbose_name='Добавлено',
                    ),
                ),
                # Заголовок поста
                (
                    'title',
                    models.CharField(max_length=256, verbose_name='Заголовок'),
                ),
                # Текст поста — сюда пишем основное содержание
                ('text', models.TextField(verbose_name='Текст')),
                # Картинка для поста — необязательная
                (
                    'image',
                    models.ImageField(
                        blank=True,
                        upload_to='post_images',
                        verbose_name='Фото',
                    ),
                ),
                # Дата публикации — можно настроить отложенную публикацию
                (
                    'pub_date',
                    models.DateTimeField(
                        help_text='Если установить дату и время в будущем — можно делать отложенные публикации.',
                        verbose_name='Дата и время публикации',
                    ),
                ),
                # Связываем пост с автором (пользователем)
                (
                    'author',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,  # Если удалить автора, удалятся и посты
                        related_name='posts',  # Имя для обратной связи
                        to=settings.AUTH_USER_MODEL,  # Ссылаемся на модель пользователя
                        verbose_name='Автор публикации',
                    ),
                ),
                # Связываем пост с категорией
                (
                    'category',
                    models.ForeignKey(
                        null=True,  # Можно оставить пустым
                        on_delete=django.db.models.deletion.SET_NULL,  # Если категорию удалят, станет NULL
                        related_name='posts',
                        to='blog.category',  # Ссылка на модель Category
                        verbose_name='Категория',
                    ),
                ),
                # Связываем пост с местоположением
                (
                    'location',
                    models.ForeignKey(
                        blank=True,  # Необязательное поле
                        null=True,  # Может быть пустым
                        on_delete=django.db.models.deletion.SET_NULL,  # Если удалить место, станет NULL
                        related_name='posts',
                        to='blog.location',  # Ссылка на модель Location
                        verbose_name='Местоположение',
                    ),
                ),
            ],
            # Настраиваем модель
            options={
                'verbose_name': 'публикация',
                'verbose_name_plural': 'Публикации',
                'ordering': ('-pub_date',),  # Сортируем посты по дате (новые сверху)
            },
        ),
        # Создаём таблицу для комментариев
        migrations.CreateModel(
            name='Comment',
            fields=[
                # ID для каждого комментария
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                # Текст комментария
                ('text', models.TextField(verbose_name='Текст комментария')),
                # Дата создания — автоматическая
                ('created_at', models.DateTimeField(auto_now_add=True)),
                # Связываем комментарий с автором
                (
                    'author',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,  # Удаляем комментарии, если удалён автор
                        related_name='author',
                        to=settings.AUTH_USER_MODEL,  # Ссылка на пользователя
                    ),
                ),
                # Связываем комментарий с постом
                (
                    'post',
                    models.ForeignKey(
                        help_text='Выберите пост, к которому относится комментарий',
                        on_delete=django.db.models.deletion.CASCADE,  # Удаляем комментарии, если удалён пост
                        related_name='comments',
                        to='blog.post',  # Ссылка на модель Post
                        verbose_name='Пост',
                    ),
                ),
            ],
            # Настраиваем модель
            options={
                'verbose_name': 'комментарий',
                'verbose_name_plural': 'Комментарии',
                'ordering': ('created_at',),  # Сортируем по дате создания
            },
        ),
    ]